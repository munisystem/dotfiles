[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap ,f :<C-u>Denite file/rec<CR>
  nmap <silent> ,g :<C-u>Denite grep<CR>
  nmap <silent> ,cg :<C-u>DeniteCursorWord grep<CR><C-R><C-W><CR>
  nmap <silent> ,b :<C-u>Denite buffer<CR>
  nmap <silent> ,l :<C-u>Denite line<CR>

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> s
    \ denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v 
    \ denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    inoremap <silent><buffer><expr> <BS> denite#do_map('move_up_path')
    inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
  endfunction

  let s:denite_win_width_percent = 0.85
  let s:denite_win_height_percent = 0.7
  let s:denite_default_options = {
      \ 'split': 'floating',
      \ 'auto_action': 'preview',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent / 2),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ 'highlight_filter_background': 'DeniteFilter',
      \ 'floating_preview': v:true,
      \ 'vertical_preview': v:true,
      \ 'preview_width': float2nr(&columns * s:denite_win_width_percent / 2),
      \ 'preview_height': float2nr(&lines * s:denite_win_height_percent),
      \ }
  call denite#custom#option('default', s:denite_default_options)

  if executable('pt')
    call denite#custom#var('grep', 'command', ['pt'])
    call denite#custom#var('grep', 'default_opts', ['--nogroup', '--nocolor', '--smart-case'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
    call denite#custom#var('file_rec', 'command', ['pt', '--follow', '--nocolor', '--nogroup', '-g', ''])
  endif
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  function! LightLineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return""
    endif
  endfunction

  function! LightLineFilename()
    return ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
         \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [  [ 'mode', 'paste' ],
        \              [ 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightLineModified',
        \   'filename': 'LightLineFilename'
        \ }
        \ }
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'kristijanhusak/vim-hybrid-material'

# [[plugins]]
# repo = 'w0rp/ale'
# hook_source = '''
# let g:ale_lint_on_text_changed = 'never'
# let g:ale_lint_on_enter = 0
# let g:ale_lint_on_save = 1
# let g:ale_sign_column_always = 1
# let g:ale_set_loclist = 0
# let g:ale_set_quickfix = 1
#
# let g:ale_go_gometalinter_options = '--vendored-linters --disable-all --tests --enable=gotype --enable=vet --enable=golint'
#
# let g:ale_echo_msg_error_str = 'E'
# let g:ale_echo_msg_warning_str = 'W'
# let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
# '''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  if executable('gopls')
    augroup LspGo
      au!
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'go-lang',
        \ 'cmd': {server_info->['gopls']},
        \ 'whitelist': ['go'],
        \ })
      autocmd FileType go setlocal omnifunc=lsp#complete
      au FileType go nnoremap <buffer><silent> gd :<C-u>LspDefinition<CR>
     augroup END
  endif
  if executable('solargraph')
      au User lsp_setup call lsp#register_server({
          \ 'name': 'solargraph',
          \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
          \ 'initialization_options': {"diagnostics": "true"},
          \ 'whitelist': ['ruby'],
          \ })
  endif
  let g:lsp_async_completion = 1
'''

