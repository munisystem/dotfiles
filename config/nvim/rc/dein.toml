[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap <C-s> [denite]
  nnoremap <silent> [denite]f :<C-u>Denite file_rec<CR>
  nnoremap <silent> [denite]m :<C-u>Denite file_mru<CR>
  nnoremap <silent> [denite]g :<C-u>Denite grep<CR>
  nnoremap <silent> [denite]c :<C-u>DeniteCursorWord grep<CR>
  nnoremap <silent> [denite]l :<C-u>Denite line<CR>
  nnoremap <silent> [denite]n :<C-u>Denite neoyank<CR>
  nnoremap <silent> [denite]b :<C-u>Denite buffer<CR>
  if executable('pt')
    call denite#custom#var('grep', 'command', ['pt'])
    call denite#custom#var('grep', 'default_opts', ['--nogroup', '--nocolor', '--smart-case'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
    call denite#custom#var('file_rec', 'command', ['pt', '--follow', '--nocolor', '--nogroup', '-g', ''])
  endif
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  function! LightLineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return""
    endif
  endfunction

  function! LightLineFilename()
    return ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
         \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [  [ 'mode', 'paste' ],
        \              [ 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightLineModified',
        \   'filename': 'LightLineFilename'
        \ }
        \ }
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'cocopon/iceberg.vim'

# [[plugins]]
# repo = 'w0rp/ale'
# hook_source = '''
# let g:ale_lint_on_text_changed = 'never'
# let g:ale_lint_on_enter = 0
# let g:ale_lint_on_save = 1
# let g:ale_sign_column_always = 1
# let g:ale_set_loclist = 0
# let g:ale_set_quickfix = 1
#
# let g:ale_go_gometalinter_options = '--vendored-linters --disable-all --tests --enable=gotype --enable=vet --enable=golint'
#
# let g:ale_echo_msg_error_str = 'E'
# let g:ale_echo_msg_warning_str = 'W'
# let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
# '''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  if executable('gopls')
    augroup LspGo
      au!
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'go-lang',
        \ 'cmd': {server_info->['gopls']},
        \ 'whitelist': ['go'],
        \ })
      autocmd FileType go setlocal omnifunc=lsp#complete
      au FileType go nnoremap <buffer><silent> gd :<C-u>LspDefinition<CR>
     augroup END
  endif
  let g:lsp_async_completion = 1
'''

